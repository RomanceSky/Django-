获取销售总额



完整代码如下：
>>> list = []
>>> for i in range(len(objectList)):
...     b = objectList[i]
...     totalPriceSum = objectList[i].get('totalPrice')  
...     list.append(totalPriceSum)
... 
多余的语句用下划线划掉
>>> list #注意输出的是list
[2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 1, 5, 4, 4, 5, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1]
>>> reduce(lambda x,y:x+y,list)
263
>>> salesStatisticsPrice = reduce(lambda x,y:x+y,list)
>>> salesStatisticsPrice
263
因为要传递给模板所以将最终的计算结果赋给一个变量



最后使用上述的函数来实现求和
【注意：】list[]不可以放在for循环里面。否则得到的列表始终只有最后一个值
同时是先取列表元素，然后在取列表中字典元素的值用get('键')方法
所以思路就是先用列表的方式，在使用字典的方式
同时注意;
下面这样的方式得到的是None
应该是输出list
>>> list = []
>>> for i in range(len(objectList)):
...     totalPriceSum = objectList[i].get("totalPrice")
...     list.append(totalPriceSum)
...     a = list.append(totalPriceSum)
...     print a
... 
None
None
None
下面是正确的
>>> for i in range(len(objectList)):
...     b = objectList[i]
...     totalPriceSum = objectList[i].get('totalPrice')
...     list.append(totalPriceSum)
... 
>>> list
[1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 1, 5, 4, 4, 5, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1]
>>> salesStatistics = reduce(lambda x,y:x+y, list)
>>> salesStatistics
266
>>> 
或者
>>> sum(list)
266


获得销售额自定义时间和业务员




【参考：http://bbs.csdn.net/topics/390087949】
>>> for i in range(len(objectList)):
...     b = objectList[i] 取得列表中的每一个元素，而每一个元素都是字典
...     totalPriceSum = objectList[i].get('totalPrice')#取得列表中字典元素的键等于'totalPrice'的字典的值
...     print totalPriceSum #类型是int
... 
>> so = salesOrder.objects.values('delivery')
>>> so
2017-10-16 15:58:08,208 DEBUG utils.execute Line:89 (0.005) QUERY = u'SELECT "sales_salesorder"."delivery" FROM "sales_salesorder" LIMIT 21' - PARAMS = (); args=()
[{'delivery': datetime.datetime(2017, 9, 12, 10, 49, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 12, 10, 52, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 12, 10, 53, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 12, 10, 53, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 12, 10, 54, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 12, 10, 54, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 12, 10, 54, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 12, 11, 12, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 12, 11, 17, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 12, 11, 19, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 14, 8, 6, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 14, 11, 10, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 18, 8, 55, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 18, 8, 56, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 18, 9, 30, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 18, 9, 31, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 18, 9, 34, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 18, 9, 45, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 18, 9, 46, tzinfo=<UTC>)}, {'delivery': datetime.datetime(2017, 9, 19, 1, 42, tzinfo=<UTC>)}, '...(remaining elements truncated)...']
>>> so[0].get('delivery')
2017-10-16 15:58:32,978 DEBUG utils.execute Line:89 (0.003) QUERY = u'SELECT "sales_salesorder"."delivery" FROM "sales_salesorder" LIMIT 1' - PARAMS = (); args=()
datetime.datetime(2017, 9, 12, 10, 49, tzinfo=<UTC>)
>>> so[0].get('delivery').strftime("%Y-%m-%d %H:%S:%M")
2017-10-16 16:03:10,827 DEBUG utils.execute Line:89 (0.003) QUERY = u'SELECT "sales_salesorder"."delivery" FROM "sales_salesorder" LIMIT 1' - PARAMS = (); args=()
'2017-09-12 10:00:49'
>>> 
>>> len(so)
2017-10-16 16:07:47,624 DEBUG utils.execute Line:89 (0.002) QUERY = u'SELECT "sales_salesorder"."delivery" FROM "sales_salesorder"' - PARAMS = (); args=()
208
>>> range(len(so))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207]
>>> for i in range(len(so)):
...     sodelivery = so[i].get('delivery').strftime("%Y-%m-%d %H:%S:%M")
...     print sodelivery
... 
2017-09-12 10:00:49
2017-09-12 10:00:52
2017-09-12 10:00:53
2017-09-12 10:00:53
2017-09-12 10:00:54
2017-09-12 10:00:54
2017-09-12 10:00:54
2017-09-12 11:00:12
2017-09-12 11:00:17
2017-09-12 11:00:19
2017-09-14 08:00:06
2017-09-14 11:00:10
2017-09-18 08:00:55
2017-09-18 08:00:56
2017-09-18 09:00:30
2017-09-18 09:00:31
>>> type(sodelivery)
<type 'str'>
注意:这里是字符串只是针对一个元素
因为这并不是一个列表

下面是正确的：
>>> listTime = []
>>> so = salesOrder.objects.values("delivery")
>>> for i in range(len(so)):
...     sodelivery = so[i].get('delivery').strftime("%Y-%m-%d %H:%S:%M")
...     listTime.append(sodelivery)
... 
2017-10-16 18:14:22,021 DEBUG utils.execute Line:89 (0.005) QUERY = u'SELECT "sales_salesorder"."delivery" FROM "sales_salesorder"' - PARAMS = (); args=()
>>> listTime
['2017-09-12 10:00:49', '2017-09-12 10:00:52', '2017-09-12 10:00:53', '2017-09-12 10:00:53', 
>>> 
时间都在列表里面

注意:如果出现settingsu错误，使用python manage.py shell而不是python来进入python的解释器环境
业务员：
>>> from users.models import *
>>> SaleschargePerson = userProfile.objects.values('nickname')
>>> SaleschargePerson
2017-10-16 16:38:17,169 DEBUG utils.execute Line:89 (0.008) QUERY = u'SELECT "users_userprofile"."nickname" FROM "users_userprofile" LIMIT 21' - PARAMS = (); args=()
[{'nickname': u'admin'}, {'nickname': u'Sky'}]

>>> for i in range(len(chargePerson)):
...     BussinessOwner = chargePerson[i].get('nickname')
...     print BussinessOwner
... 
2017-10-16 16:41:45,866 DEBUG utils.execute Line:89 (0.002) QUERY = u'SELECT "users_userprofile"."nickname" FROM "users_userprofile"' - PARAMS = (); args=()
admin
Sky
>>> 杯子

下面是正确的：
>>> from users.models import *
>>> SalesPerson = userProfile.objects.values('nickname')
>>> for i in range(len(SalesPerson)):
...     BusinessNum = SalesPerson[i].get('nickname')
...     listOwner.append(BusinessNum)
>>> listOwner
[u'admin', u'Sky']
>>> listOwner[0]
u'admin'
